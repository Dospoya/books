"""First migration

Revision ID: 93596f62eee2
Revises:
Create Date: 2025-10-03 15:49:05.105710

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '93596f62eee2'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    role_enum_create = postgresql.ENUM(
        'author', 'illustrator', 'editor',
        name='contributor_role',
        create_type=True,
    )
    role_enum_create.create(op.get_bind(), checkfirst=True)
    # ENUM для использования в колонке (НЕ создаёт тип повторно)
    role_enum = postgresql.ENUM(
        'author', 'illustrator', 'editor',
        name='contributor_role',
        create_type=False,
    )
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bookcontributor',
    sa.Column('book_id', sa.UUID(), nullable=False),
    sa.Column('contributor_id', sa.UUID(), nullable=False),
    sa.Column('role', role_enum, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['book_id'], ['book.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['contributor_id'], ['contributor.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('book_id', 'contributor_id', 'role')
    )
    op.create_table('bookgenre',
    sa.Column('book_id', sa.UUID(), nullable=False),
    sa.Column('genre_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['book_id'], ['book.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['genre_id'], ['genre.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('book_id', 'genre_id')
    )
    op.alter_column('book', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('book', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('contributor', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('contributor', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('genre', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('genre', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('genre', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('genre', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('contributor', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('contributor', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('book', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('book', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_table('book_genre',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('book_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('genre_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['book_id'], ['book.id'], name='book_genre_book_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['genre_id'], ['genre.id'], name='book_genre_genre_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('book_id', 'genre_id', name='book_genre_pkey')
    )
    op.create_table('audit',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True)
    )
    op.create_table('book_contributor',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('book_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('contributor_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('author', 'editor', 'illustrator', name='contributor_role'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['book_id'], ['book.id'], name='book_contributor_book_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['contributor_id'], ['contributor.id'], name='book_contributor_contributor_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('book_id', 'contributor_id', 'role', name='book_contributor_pkey')
    )
    op.drop_table('bookgenre')
    op.drop_table('bookcontributor')
    # ### end Alembic commands ###
    role_enum_create = postgresql.ENUM(
        'author', 'illustrator', 'editor',
        name='contributor_role',
        create_type=True,
    )
    role_enum_create.drop(op.get_bind(), checkfirst=True)
